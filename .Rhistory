raw.df$grade[i] = 'C'
} else {
}
}
}
raw1.df = raw.df %>% filter(action == 'Violations were cited in the following area(s)') %>%
mutate(action = 'Voilations')
raw1.df
str(raw1.df)
raw1.df %>% select (action) %>% ditinct
raw1.df %>% select (action) %>% distinct
raw1.df %>% select (action) %>% distinct
View(raw1.df %>% select (action) %>% distinct)
ra1 = raw1.df %>% select (action) %>% distinct
ra1
head(ra1)
ra1 = raw.df %>% select (action) %>% distinct
head(ra1)
raw1.df = raw.df %>% filter(action == 'Violations were cited in the following area(s)') %>%
mutate(action = 'Voilations')
raw1.df
raw.df %>% filter(action == 'Violations were cited in the following area(s)')
raw.df %>% filter(action == 'Violations were cited in the following area(s)')
raw.df %>% filter(action == "Violations were cited in the following area(s)")
raw.df %>% filter(action == "Establishment re-opened by DOHMH")
raw1.df = raw.df %>% filter(action == 'Establishment re-opened by DOHMH') %>%
mutate(action = 'Re-opened')
raw.df %>% filter(action == "Establishment re-opened by DOHMH")
raw1.df %>% filter(action == "Establishment re-opened by DOHMH")
raw1.df %>% filter(action == "Re-opened")
ra1 = raw.df %>% select (action) %>% distinct
raw.df %>% select (action) %>% distinct
raw1.df = raw.df %>% filter(action == 'Violations were cited in the following area(s).') %>%
mutate(action = 'Violations')
rawAc.df = raw.df %>% filter(action == 'Establishment re-opened by DOHMH') %>%
mutate(action = 'Re-opened')
rawAc.df = raw.df %>% filter(action == 'Violations were cited in the following area(s).') %>%
mutate(action = 'Violations')
rawAc.df = raw.df %>% filter(action == 'No violations were recorded at the time of this inspection.') %>%
mutate(action = 'No-violations')
rawAc.df = raw.df %>% filter(action == 'Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.') %>%
mutate(action = 'Closed')
rawAc.df = raw.df %>% filter(action == 'Establishment re-closed by DOHMH') %>%
mutate(action = 'Re-closed')
rawAc.df %>% select (action) %>% distinct
rawAc.df
rawAc1.df = raw.df %>% filter(action == 'Establishment re-opened by DOHMH') %>%
mutate(action = 'Re-opened')
rawAc2.df = raw.df %>% filter(action == 'Violations were cited in the following area(s).') %>%
mutate(action = 'Violations')
rawAc3.df = raw.df %>% filter(action == 'No violations were recorded at the time of this inspection.') %>%
mutate(action = 'No-violations')
rawAc4.df = raw.df %>% filter(action == 'Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.') %>%
mutate(action = 'Closed')
rawAc5.df = raw.df %>% filter(action == 'Establishment re-closed by DOHMH') %>%
mutate(action = 'Re-closed')
rawActDF = rbind(rawAc1.df,rawAc2.df,rawAc3.df, rawAc4.df, rawAc5.df)
rawActDF %>% select (action) %>% distinct
rawActDF$boro
is.na(rawActDF$boro)
count(is.na(rawActDF$boro))
rownames(   is.na(rawActDF$boro) )
rownames(   is.na(rawActDF$score) )
is.na(rawActDF$score)
rownames(   is.na(rawActDF$score) == TRUE )
rawActDF[is.na(rawActDF$boro),]
rawActDF[is.na(rawActDF$score),]
rawActDF[is.na(rawActDF$score),] %>% select (score)
rawActDF[!(is.na(rawActDF$score)),] %>% select (score)
rawActDF[!(is.na(rawActDF$score)),]
#filtering our missing rows of score
rawActDF1 = rawActDF[!(is.na(rawActDF$score)),]
rawActDF1[(is.na(rawActDF1$score)),]
rawActDF1 %>% select (inspection.date) %>% distinct()
view(rawActDF1 %>% select (inspection.date) %>% distinct())
raw.df %>% select (action) %>% distinct
view(raw.df %>% select (action) %>% distinct)
raw.df %>% filter(action == 'NA')
raw.df %>% filter(!complete.cases(action))
raw.df %>% filter(!complete.cases(action)) %>% distinct()
raw.df %>% filter(!complete.cases(action)) %>% distinct(action)
rawActDF %>% filter(boro == 'Missing')
rawActDF %>% filter(!(boro == 'Missing'))
rawAc6.df = raw.df %>% filter(!complete.cases(action))
rawActDF = rbind(rawAc1.df,rawAc2.df,rawAc3.df, rawAc4.df, rawAc5.df, rawAc6.df)
rawActDF1 = rawActDF %>% filter(!(boro == 'Missing'))
rawActDF[!(is.na(rawActDF$score)),]
rawActDF1[!(is.na(rawActDF$score)),] %>% select (score)
rawActDF1[(is.na(rawActDF1$score)),] %>% select (score) %>% distinct()
rawActDF1[!(is.na(rawActDF1$score)),] %>% select (score)
rawActDF1[!(is.na(rawActDF1$score)),] %>% select (score) %>% distinct()
rawActDF1[!(is.na(rawActDF1$score)),] %>% select (score) %>% distinct() %>% filter(score<0)
rawActDF1[!(is.na(rawActDF1$score)),] %>% select (score) %>% distinct() %>% filter(score>0)
rawActDF1[!(is.na(rawActDF1$score)),] %>% filter(score>0) %>% select (score) %>% distinct()
rawActDF1[!(is.na(rawActDF1$score)),] %>% filter(score>0) %>% select (score) %>% distinct() %>% filter(score<0)
rawActDF1 = rawActDF %>% filter(!(boro == 'Missing'))
#filtering our missing rows and negative values of score
rawActDF2 = rawActDF1[!(is.na(rawActDF1$score)),] %>% filter(score>0)
rawActDF2 %>% select(inspection.date) %>% distinct()
rawActDF2 %>% select(inspection.date) %>% distinct %>% arrange(inspection.date)
rawActDF2 %>% select(inspection.date) %>% distinct %>% arrange(desc(inspection.date))
rawActDF2 %>% select(camis, boro, cuisine, inspection.date, action, score, grade, month)
rawData = rawActDF2 %>% select(camis, boro, cuisine, inspection.date, action, score, grade, month)
rawData %>% distinct()
unique(rawData)
inspections = rawData %>% distinct()
ggplot(data = inspections, aes(x = boro)) + geom_bar(fill=grade)
view(inspections)
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill=grade))
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill=grade), position = 'Dodge')
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill=grade), position = 'Dodge')+
ylab("Borough")+ggtitle("Restaurants by Borough and Grade")
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill=grade), position = 'Dodge')+
ylab("Borough")+ggtitle("Restaurants by Borough and Grade")
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill=grade), position = 'Dodge')+
xlab("Borough")+ggtitle("Restaurants by Borough and Grade")
ggplot(data = inspections, aes(x = cuisine)) + geom_bar(aes(fill=grade), position = 'Dodge')+
xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
ggplot(data = inspections, aes(x = cuisine)) + geom_bar(aes(fill=grade), position = 'Dodge')+
coord_flip() +  xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
inspections %>% top_n (20) %>% ggplot(aes(x = cuisine)) + geom_bar(aes(fill=grade), position = 'Dodge')+
coord_flip() +  xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
inspections %>% top_n (20)
inspections %>% group_by(cuisine)
inspections %>% order_by(cuisine)
inspections %>% arrange(cuisine)
inspections %>% arrange(cuisine) %>% distinct()
inspections %>% arrange(cuisine) %>% distinct(cuisine)
inspections %>% arrange(cuisine) %>% distinct(cuisine) %>% top_n(20)
inspections %>% arrange(cuisine) %>% distinct(cuisine) %>% top(20)
inspections %>% group_by(cuisine) %>% summarise(n())
inspections %>% group_by(cuisine) %>% summarise(n()) %>% top_n(20)
inspections %>% group_by(cuisine) %>% summarise(n()) %>% top_n(20) %>% select(cuisine,grade)
inspections %>% group_by(cuisine,grade) %>% summarise(n()) %>% top_n(20) )
inspections %>% group_by(cuisine,grade) %>% summarise(n()) %>% top_n(20)
inspections %>% group_by(cuisine,grade) %>% summarise(sum(n()) %>% top_n(20)
inspections %>% group_by(cuisine,grade) %>% summarise(sum(n())) %>% top_n(20)
inspections %>% group_by(cuisine,grade) %>% summarise(n=n(), count=sum(n)) %>% top_n(20)
inspections %>% group_by(cuisine,grade) %>% summarise(n=n()) %>% mutate(count=sum(n)) %>%  top_n(20)
inspections %>% group_by(cuisine,grade) %>% summarise(n=n()) %>% mutate(count=sum(n)) %>%  top_n(cuisine,20)
inspections %>% group_by(cuisine) %>% summarise(n())
inspections %>% group_by(cuisine) %>% summarise(n()) %>% top_n(20)
inspections %>% group_by(cuisine)
inspections %>% group_by(cuisine) %>% summarise(n()) %>% top_n(20)
cuisineDF = inspections %>% group_by(cuisine) %>% summarise(n()) %>% top_n(20)
inspections %>% filter(cuisine %in% cuisineDF$cuisine)
inspections %>% filter(cuisine %in% cuisineDF$cuisine) %>% distinct(cuisine)
inspections %>% filter(cuisine %in% cuisineDF$cuisine) %>% ggplot(aes(x = cuisine)) + geom_bar(aes(fill=grade), position = 'Dodge')+
coord_flip() +  xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
inspections %>% filter(cuisine %in% cuisineDF$cuisine) %>% ggplot(aes(x = reorder(cuisine))) + geom_bar(aes(fill=grade), position = 'Dodge')+
coord_flip() +  xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
inspections %>% filter(cuisine %in% cuisineDF$cuisine) %>% ggplot(aes(x = cuisine)) + geom_bar(aes(fill=grade), position = 'Dodge')+
coord_flip() +  xlab("Cuisine")+ggtitle("Restaurants by Borough and Grade")
ggplot(data = inspections, aes(x = boro, y =score)) + geom_density(aes(color = score), position = 'Dodge')+
xlab("Borough")+ ggtitle("Restaurants by Borough and Score")
ggplot(data = inspections) + geom_density(aes(x = boro, y =score, color = score), position = 'Dodge')+
xlab("Borough")+ ggtitle("Restaurants by Borough and Score")
ggplot(data = inspections) + geom_density(aes(x = boro, y = score, color = score))+
xlab("Borough")+ ggtitle("Restaurants by Borough and Score")
ggplot(data = inspections) + geom_density(aes(x = boro, y = score) , color = score)+
xlab("Borough")+ ggtitle("Restaurants by Borough and Score")
ggplot(data = inspections) + geom_density(aes(x = score, y = boro) , color = score)+
xlab("Borough")+ ggtitle("Restaurants by Borough and Score")
?geom_density
ggplot(data = inspections, aes(x = score, y = boro)) +geom_density()
ggplot(data = inspections, aes(x = boro, y = score)) +geom_density()
ggplot(data = inspections) + geom_density(aes(x = score) , fill = boro)
ggplot(data = inspections) + geom_density(aes(x = score , fill = boro))
ggplot(data = inspections) + geom_density(aes(x = score , fill = boro))+ coord_cartesian(xlim=c(0:75))
ggplot(data = inspections) + geom_density(aes(x = score , color = boro))+ coord_cartesian(xlim=c(0:75))
ggplot(data = inspections) + geom_density(aes(x = score , color = boro))+ coord_cartesian(xlim=c(5:75))
ggplot(data = inspections) + geom_density(aes(x = score , color = boro))+ coord_cartesian(xlim=c(5:65))
ggplot(data = inspections) + geom_density(aes(x = score , color = boro))+ coord_cartesian(xlim=c(5:55))
ggplot(data = inspections) +
geom_density(aes(x = score , color = boro))+
coord_cartesian(xlim=c(5:55))
ggplot(data = inspections) +
geom_density(aes(x = score , color = boro))+
coord_cartesian(xlim=c(5:55))+ggtitle("Density Plot of Score by Borough")
ggplot(data = inspections) +
geom_density(aes(x = score , color = boro))+
coord_cartesian(xlim=c(5:55))+ggtitle("Density Plot of Score by Borough")
inspections %>% filter(actions %in% c('Closed', 'Reclosed')
inspections %>% filter(actions %in% c('Closed', 'Reclosed'))
inspections %>% filter(actions %in% ('Closed', 'Reclosed'))
inspections %>% filter(actions %in% c('Closed', 'Reclosed'))
inspections %>% filter(action %in% c('Closed', 'Reclosed'))
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro) %>% summarise(Num_closed = n())
closedDF = inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro) %>% summarise(Num_closed = n())
inspections %>%  group_by(boro) %>% summarise(Num_closed = n())
tot_inspections = inspections %>%  group_by(boro) %>% summarise(Num_closed = n())
inner_join(closedDF,tot_inspections, by="boro")
inner_join(closedDF,tot_inspections, by="boro") %>% mutate(ratio =  Num_closed.x/ Num_closed.y )
Closed_inspDF = inner_join(closedDF,tot_inspections, by="boro") %>% mutate(ratio =  Num_closed.x/ Num_closed.y )
inspections %>% filter(action = 'Closed')
inspections %>% filter(action == 'Closed')
view(inspections %>% filter(action == 'Closed'))
view(inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>% summarise(n())
view(inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>% summarise(n())
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n()) %>% filter(num_closed>1)
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n()>1)
closedDF = inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n())
closedDF = inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n())
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n())
library(dplyr)
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(num_closed = n())
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine) %>%
summarise(n())
inspections %>% filter(action == 'Closed')) %>% group_by (boro, cuisine)
inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine)
inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine) %>%
summarise(n())
inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine) %>%
summarise(Closed_num = n())
inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine) %>%
summarise(Closed_num = n()) %>% filter(Closed_num > 1)
closedDF = inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine) %>%
summarise(Closed_num = n()) %>% filter(Closed_num > 1)
knitr::opts_chunk$set(echo = TRUE)
RestDF = inspections %>% filter(action == 'Closed') %>% group_by (boro, cuisine) %>%
summarise(Closed_num = n()) %>% filter(Closed_num > 1)
inner_join(RestdDF,tot_inspections, by="boro")
inner_join(RestDF,tot_inspections, by="boro")
Closed_restDF = inner_join(RestDF,tot_inspections, by="boro") %>% mutate(ratio =  Closed_num/ Num_closed )
closedDF = inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro) %>% summarise(Num_closed = n())
Closed_inspDF
Closed_restDF
inner_join(RestDF,tot_inspections, by="boro") %>% mutate(ratio =  Closed_num/ Num_closed ) %>% group_by(boro) %>% summarise(sum(ratio))
Closed_inspDF
Closed_restDF = inner_join(RestDF,tot_inspections, by="boro") %>% mutate(rest_closed_ratio =  Closed_num/ Num_closed ) %>% group_by(boro) %>% summarise(sum(rest_closed_ratio))
inner_join(Closed_restDF,Closed_inspDF,by="boro")
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, sum(rest_closed_ratio), ratio)
Closed_restDF = inner_join(RestDF,tot_inspections, by="boro") %>% mutate(rest_closed_ratio =  Closed_num/ Num_closed ) %>% group_by(boro) %>% summarise(rest_closed_ratio = sum(rest_closed_ratio))
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)%>% ggplot(x = rest_closed_ratio, y= ratio)+geom_point(color = boro)
library(ggplot2)
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)%>% ggplot(x = rest_closed_ratio, y= ratio)+geom_point(color = boro)
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)%>% ggplot(x = rest_closed_ratio, y= ratio)+geom_point(aes(color = boro))
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)%>% ggplot(aes(x = rest_closed_ratio, y= ratio))+geom_point(aes(color = boro))
inner_join(Closed_restDF,Closed_inspDF,by="boro") %>% select(boro, rest_closed_ratio, ratio)%>% ggplot(aes(x = rest_closed_ratio, y= ratio))+geom_point(aes(color = boro))+xlab("Restaurant Closure Ratio")+ylab("Inspection Closure Ratio")+ggtitle("Closure Ratio Analysis")
Closed_inspDF
cuisineDF
inspections %>% filter(cuisine %in% cuisineDF$cuisine)
inspections %>% filter(cuisine %in% cuisineDF$cuisine, action %in% c('Closed', 'Reclosed'))
inspections %>% filter(action %in% c('Closed', 'Reclosed'))
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,cuisine) %>% summarise(n())
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,cuisine) %>% summarise(n()) %>% top_n(20)
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,cuisine) %>% summarise(cuisPerBoro = n()) %>% top_n(20) %>% mutate(sumByBoro = sum(cuisPerBoro))
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,cuisine) %>% summarise(cuisPerBoro = n()) %>% top_n(20) %>% mutate(sumByBoro = sum(cuisPerBoro), RatioBC = cuisPerBoro/sumByBoro)
ggplot(data=facetDF, x=cuisine, y=RatioBC)+geom_bar(stat = 'identity')
facetDF = inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,cuisine) %>% summarise(cuisPerBoro = n()) %>% top_n(20) %>% mutate(sumByBoro = sum(cuisPerBoro), RatioBC = cuisPerBoro/sumByBoro)
ggplot(data=facetDF, x=cuisine, y=RatioBC)+geom_bar(stat = 'identity')
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')+coord_flip()
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')+coord_flip()+facet_wrap(boro)
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')+coord_flip()+facet_wrap(boro~)
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')+coord_flip()+facet_wrap(boro~)
ggplot(data=facetDF, aes(x=cuisine, y=RatioBC))+geom_bar(stat = 'identity')+coord_flip()+facet_wrap(~boro)
inspections %>% group_by(boro,month) %>% summarise(scores=mean(score))
inspections %>% group_by(boro,month) %>% summarise(scores=mean(score)) %>%
ggplot(aes(x=month, y=scores))+geom_line(color=boro)
inspections %>% group_by(boro,month) %>% summarise(scores=mean(score)) %>%
ggplot(aes(x=month, y=scores))+geom_line(aes(color=boro))
inspections %>% group_by(boro,month) %>% summarise(countBymonth = n())
inspections %>% group_by(boro,month) %>% summarise(countBymonth = n()) %>% mutate(ratioBM = countBymonth/sum(countBymonth))
inspections %>% group_by(boro,month) %>% summarise(countBymonth = n()) %>% mutate(ratioBM = countBymonth/sum(countBymonth)) %>% ggplot(aes(x=month, y=ratioBM))+geom_line(aes(color=boro))
inspections %>% filter(action %in% c('Closed', 'Reclosed')) %>% group_by(boro,month) %>% summarise(countBymonth = n()) %>% mutate(ratioBM = countBymonth/sum(countBymonth)) %>% ggplot(aes(x=month, y=ratioBM))+geom_line(aes(color=boro))
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
quiz.data
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
shiny::runApp('~/NYCDataScience/Projects/ShinyCode/Schools')
leaflet(data = schoolDist) %>% addTiles %>%  addProviderTiles("OpenStreetMap_Mapnik")%>%
addPolygons( fillColor = pal,
#~pal(PerTook),
fillOpacity = 0.7,
weight=1,
label=districtNumber,
highlight = highlightOptions(
weight=5,
fillOpacity = 0.7,
bringToFront = TRUE))
#loading shape file for geospatial analysis
schoolDist = readOGR(dsn = 'C:/Users/priya/Documents/NYCDataScience/Projects/RShiny/School Districts', layer = "geo_export_96cb9211-c0fc-4b99-975e-94c20e7c39c0")
leaflet(data = schoolDist) %>% addTiles %>%  addProviderTiles("OpenStreetMap_Mapnik")%>%
addPolygons( fillColor = pal,
#~pal(PerTook),
fillOpacity = 0.7,
weight=1,
label=districtNumber,
highlight = highlightOptions(
weight=5,
fillOpacity = 0.7,
bringToFront = TRUE))
pal <- colorBin(c("red", "orange", "yellow", "yellowgreen", "green"), domain = schoolDist$PerTook, bins = bins)
leaflet(data = schoolDist) %>% addTiles %>%  addProviderTiles("OpenStreetMap_Mapnik")%>%
addPolygons( fillColor = pal,
#~pal(PerTook),
fillOpacity = 0.7,
weight=1,
label=districtNumber,
highlight = highlightOptions(
weight=5,
fillOpacity = 0.7,
bringToFront = TRUE))
bins <- c(10, 20, 30, 40, 50, 60)
pal <- colorBin(c("red", "orange", "yellow", "yellowgreen", "green"), domain = schoolDist$PerTook, bins = bins)
districtNumber <- paste("<strong>School district: </strong>", schoolDist$school_dis, schoolDist$DistrictName,
"<br><strong>Total Grade 8 students: </strong>", schoolDist$Total,
"<br><strong>Total SHSAT takers: </strong>", schoolDist$Takers,
"<br><strong>Percent Takers: </strong>", schoolDist$PerTook) %>% lapply(htmltools::HTML)
leaflet(data = schoolDist) %>% addTiles %>%  addProviderTiles("OpenStreetMap_Mapnik")%>%
addPolygons( fillColor = pal,
#~pal(PerTook),
fillOpacity = 0.7,
weight=1,
label=districtNumber,
highlight = highlightOptions(
weight=5,
fillOpacity = 0.7,
bringToFront = TRUE))
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
str(temp)
summary(temp)
sd(temp$Body.Temp)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
str(temp)
#1: Numeric EDA.
cat ("The data set contains 3 variabes temperature, Gender and Heart  rate> Gender has 2 discrete values: Male and Female. Body Temp contains only numbers and falls in range of 96.3 to 100.8 ; Temp also contains numbers ranging from 57 to 89.Summary shows required information")
summary(temp)
sd(temp$Body.Temp)
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp)) %>%
pander()
library(dplyr)
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp)) %>%
pander()
?pander
?pander()
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
library(dplyr)
#1: Numeric EDA.
cat ("The data set contains 3 variabes temperature, Gender and Heart  rate> Gender has 2 discrete values: Male and Female. Body Temp contains only numbers and falls in range of 96.3 to 100.8 ; Temp also contains numbers ranging from 57 to 89.Summary shows required information")
summary(temp)
sd(temp$Body.Temp)
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp))
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
library(dplyr)
#1: Numeric EDA.
cat ("The data set contains 3 variabes temperature, Gender and Heart  rate> Gender has 2 discrete values: Male and Female. Body Temp contains only numbers and falls in range of 96.3 to 100.8 ; Temp also contains numbers ranging from 57 to 89.Summary shows required information")
summary(temp)
sd(temp$Body.Temp)
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp))
#Univariate EDA
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp))
#Univariate EDA
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp), var_temp = var(temp$Body.Temp))
#Univariate EDA
temp %>%
summarize(mean_temp = mean(temp$Body.Temp), st_dev_temp = sd(temp$Body.Temp), var_temp = var(temp$Body.Temp), median(temp$Body.Temp))
summary(temp)
temp %>%
summarize(mean_HeartRate = mean(temp$Heart.Rate), st_dev_HeartRate = sd(temp$Heart.Rate), var_HeartRate = var(temp$Heart.Rate), median_HeartRate =  median(temp$Heart.Rate))
library(ggplot2)
ggplot(temp, aes(x = Temp, y= Heart.Rate))
ggplot(data=temp, aes(x = Body.Temp, y= Heart.Rate))
ggplot(data=temp, aes(x = Body.Temp, y= Heart.Rate))+geom_point()
ggplot(data=temp, aes(x = Body.Temp, y= Heart.Rate))+geom_point(color = Gender)
ggplot(data=temp, aes(x = Body.Temp, y= Heart.Rate))+geom_point(aes(color = Gender))
ggplot(data=temp, aes(x = Gender , y= Heart.Rate))+geom_box
ggplot(data=temp, aes(x = Gender , y= Heart.Rate))+geom_box()
ggplot(data=temp, aes(x = Gender , y= Heart.Rate)) + geom_boxplot()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
pts = -3 + (1:600)/100
ggplot() +
geom_line(aes(x=pts, y=dnorm(pts)))
temp %>% ggplot() +
geom_line(aes(x=Body.Temp, y=dnorm(Body.Temp)))
temp %>% ggplot() +
geom_line(aes(x=Body.Temp)))
temp %>% ggplot() +
geom_line(aes(x=Body.Temp))
temp %>% ggplot() +
geom_line(aes(x=Gender , y=Body.Temp))
rnorm(temp$Body.Temp)
plot(rnorm(temp$Body.Temp))
pts
temp %>% ggplot() +
geom_line(rnorm(temp$Body.Temp))
temp %>% ggplot() +
geom_line(aes(x= Body.Temp , y=rnorm(temp$Body.Temp)))
temp %>% ggplot() +
geom_line(aes(x= Heart.Rate , y=rnorm(temp$Heart.Rate)))
ggplot(data=temp, aes(x = Gender , y= Body.Temp)) + geom_boxplot()
t.statistic = (mean(temp$Body.Temp) - 98.6)/(sd(temp$Body.Temp)/sqrt(130))
mean(temp$Body.Temp)
t.statistic
pt(q = t.statistic, df = 129, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 98.6, alternative = "greater")
t.test(heights, mu = 98.6, alternative = "smaller")#P-value is 1;
t.test(heights, mu = 98.6, alternative = "less")#P-value is 1;
temp %>% filter(gender =='Male')
temp %>% filter(Gender =='Male')
temp %>% group_by(Gender) %>% summarise(avg_temp = mean(Body.Temp),max_temp = max(Body.Temp), min_temp = min(Body.Temp))
temp %>% group_by(Gender) %>% summarise(avg_temp = mean(Body.Temp),max_temp = max(Body.Temp), min_temp = min(Body.Temp), quantile(Body.Temp))
temp %>% group_by(Gender) %>% summarise(avg_temp = mean(Body.Temp),max_temp = max(Body.Temp), min_temp = min(Body.Temp))
temp %>% filter(Gender = 'Female')
temp %>% filter(Gender == 'Female')
temp_f = temp %>% filter(Gender == 'Female')
temp_m = temp %>% filter(Gender == 'Male')
temp_f
t.statistic2 = (mean(temp_f$Body.Temp) - mean(temp_m$Body.Temp))/sqrt(var(temp_f$Body.Temp)/65 + var(temp_m$Body.Temp)/65)
t.statistic2
pt(q = t.statistic2, df = 64, lower.tail = FALSE)
t.test(temp_m$Body.Temp, temp_f$Body.Temp, alternative = "two.sided") #Conducting the t-test for two
library(boot)
library(boot)
t.test(temp$Body.Temp, mu = 98.6, alternative = "greater")#P-value is 1;
var.test(temp_m$Heart.Rate, temp_f$Heart.Rate, alternative = "two.sided") #Conducting the F-test to
f.statistic = var(temp_m$Heart.Rate)/var(temp_f$Heart.Rate) #Manually calculating the F-statistic.
f.statistic
var.test(temp_m$Heart.Rate, temp_f$Heart.Rate, alternative = "two.sided") #Conducting the F-test to
shiny::runApp('~/NYCDataScience/Projects/ShinyCode/Schools')
